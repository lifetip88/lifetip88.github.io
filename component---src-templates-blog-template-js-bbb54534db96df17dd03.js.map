{"version":3,"file":"component---src-templates-blog-template-js-bbb54534db96df17dd03.js","mappings":"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","sources":["webpack://zoomkoding.com/./src/components/post-header/index.js","webpack://zoomkoding.com/./src/components/post-navigator/index.js","webpack://zoomkoding.com/./src/components/post-content/index.js","webpack://zoomkoding.com/./src/components/utterances/index.js","webpack://zoomkoding.com/./src/templates/blog-template.js"],"sourcesContent":["import { Link } from 'gatsby';\r\nimport React from 'react';\r\nimport './style.scss';\r\n\r\nfunction PostHeader({ post, viewCount }) {\r\n  return (\r\n    <header className=\"post-header\">\r\n      {post.emoji && <div className=\"emoji\">{post.emoji}</div>}\r\n      <div className=\"info\">\r\n        <div className=\"categories\">\r\n          {post.categories.map((category) => (\r\n            <Link className=\"category\" key={category} to={`/posts/${category}`}>\r\n              {category}\r\n            </Link>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <h1 className=\"title\">{post.title}</h1>\r\n      <div className=\"info\">\r\n        <div className=\"author\">\r\n          posted by <strong>{post.author}</strong>,\r\n        </div>{' '}\r\n        {post.date}\r\n        {viewCount && ` · ${viewCount} views`}\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\nexport default PostHeader;\r\n","import { Link } from 'gatsby';\r\nimport React from 'react';\r\nimport './style.scss';\r\n\r\nfunction PostNavigator({ prevPost, nextPost }) {\r\n  return (\r\n    <div className=\"post-navigator\">\r\n      <div className=\"post-navigator-card-wrapper\">\r\n        {nextPost && (\r\n          <Link className=\"post-card prev\" key={nextPost.id} to={nextPost.slug}>\r\n            <div className=\"direction\">이전 글</div>\r\n            <div className=\"title\">{nextPost.title}</div>\r\n          </Link>\r\n        )}\r\n      </div>\r\n      <div className=\"post-navigator-card-wrapper\">\r\n        {prevPost && (\r\n          <Link className=\"post-card next\" key={prevPost.id} to={prevPost.slug}>\r\n            <div className=\"direction\">다음 글</div>\r\n            <div className=\"title\">{prevPost.title}</div>\r\n          </Link>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostNavigator;\r\n","import React from 'react';\r\nimport './style.scss';\r\n\r\nfunction PostContent({ html }) {\r\n  return (\r\n    <div className=\"post-content\">\r\n      <div className=\"markdown\" dangerouslySetInnerHTML={{ __html: html }} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostContent;\r\n","import React, { createRef, useEffect, useRef } from 'react';\r\n\r\nconst src = 'https://utteranc.es/client.js';\r\nconst branch = 'master';\r\n\r\nfunction Utterances({ repo, path }) {\r\n  const rootElm = createRef();\r\n  const isUtterancesLoaded = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (!rootElm.current || isUtterancesLoaded.current) return;\r\n    const storedIsDarkMode = localStorage.getItem('isDarkMode');\r\n\r\n    const utterances = document.createElement('script');\r\n    const utterancesConfig = {\r\n      src,\r\n      repo,\r\n      branch,\r\n      theme: JSON.parse(storedIsDarkMode) ? 'photon-dark' : 'github-light',\r\n      label: 'comment',\r\n      async: true,\r\n      'issue-term': 'pathname',\r\n      crossorigin: 'anonymous',\r\n    };\r\n\r\n    Object.keys(utterancesConfig).forEach((configKey) => {\r\n      utterances.setAttribute(configKey, utterancesConfig[configKey]);\r\n    });\r\n    rootElm.current.appendChild(utterances);\r\n    isUtterancesLoaded.current = true;\r\n  }, [repo, rootElm, path]);\r\n\r\n  return <div className=\"utterances\" ref={rootElm} />;\r\n}\r\n\r\nexport default Utterances;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport Layout from '../layout';\r\nimport Seo from '../components/seo';\r\nimport PostHeader from '../components/post-header';\r\nimport PostNavigator from '../components/post-navigator';\r\nimport Post from '../models/post';\r\nimport PostContent from '../components/post-content';\r\nimport Utterances from '../components/utterances';\r\n\r\nfunction BlogTemplate({ data }) {\r\n  const [viewCount, setViewCount] = useState(null);\r\n\r\n  const curPost = new Post(data.cur);\r\n  const prevPost = data.prev && new Post(data.prev);\r\n  const nextPost = data.next && new Post(data.next);\r\n  const { siteUrl, comments } = data.site?.siteMetadata;\r\n  const utterancesRepo = comments?.utterances?.repo;\r\n\r\n  useEffect(() => {\r\n    if (!siteUrl) return;\r\n    const namespace = siteUrl.replace(/(^\\w+:|^)\\/\\//, '');\r\n    const key = curPost.slug.replace(/\\//g, '');\r\n\r\n    fetch(\r\n      `https://api.countapi.xyz/${\r\n        process.env.NODE_ENV === 'development' ? 'get' : 'hit'\r\n      }/${namespace}/${key}`,\r\n    ).then(async (result) => {\r\n      const data = await result.json();\r\n      setViewCount(data.value);\r\n    });\r\n  }, [siteUrl, curPost.slug]);\r\n\r\n  return (\r\n    <Layout>\r\n      <Seo title={curPost?.title} description={curPost?.excerpt} />\r\n      <PostHeader post={curPost} viewCount={viewCount} />\r\n      <PostContent html={curPost.html} />\r\n      <PostNavigator prevPost={prevPost} nextPost={nextPost} />\r\n      {utterancesRepo && <Utterances repo={utterancesRepo} path={curPost.slug} />}\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default BlogTemplate;\r\n\r\nexport const pageQuery = graphql`\r\n  query($slug: String, $nextSlug: String, $prevSlug: String) {\r\n    cur: markdownRemark(fields: { slug: { eq: $slug } }) {\r\n      id\r\n      html\r\n      excerpt(pruneLength: 500, truncate: true)\r\n      frontmatter {\r\n        date(formatString: \"MMMM DD, YYYY\")\r\n        title\r\n        categories\r\n        author\r\n        emoji\r\n      }\r\n      fields {\r\n        slug\r\n      }\r\n    }\r\n\r\n    next: markdownRemark(fields: { slug: { eq: $nextSlug } }) {\r\n      id\r\n      html\r\n      frontmatter {\r\n        date(formatString: \"MMMM DD, YYYY\")\r\n        title\r\n        categories\r\n        author\r\n        emoji\r\n      }\r\n      fields {\r\n        slug\r\n      }\r\n    }\r\n\r\n    prev: markdownRemark(fields: { slug: { eq: $prevSlug } }) {\r\n      id\r\n      html\r\n      frontmatter {\r\n        date(formatString: \"MMMM DD, YYYY\")\r\n        title\r\n        categories\r\n        author\r\n        emoji\r\n      }\r\n      fields {\r\n        slug\r\n      }\r\n    }\r\n\r\n    site {\r\n      siteMetadata {\r\n        siteUrl\r\n        comments {\r\n          utterances {\r\n            repo\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"names":["_ref","post","viewCount","React","className","emoji","categories","map","category","Link","key","to","title","author","date","prevPost","nextPost","id","slug","html","dangerouslySetInnerHTML","__html","repo","path","rootElm","createRef","isUtterancesLoaded","useRef","useEffect","current","storedIsDarkMode","localStorage","getItem","utterances","document","createElement","utterancesConfig","src","branch","theme","JSON","parse","label","async","crossorigin","Object","keys","forEach","configKey","setAttribute","appendChild","ref","_data$site","_comments$utterances","data","setViewCount","useState","curPost","Post","cur","prev","next","siteUrl","comments","site","siteMetadata","utterancesRepo","namespace","replace","fetch","then","result","json","value","Layout","Seo","description","excerpt","PostHeader","PostContent","PostNavigator","Utterances"],"sourceRoot":""}